{
    "swagger": "2.0",
    "info": {
        "description": "An API with centralized dog adoption information.",
        "title": "DogAdoptionApp REST HATEOAS API",
        "contact": {
            "name": "Gustav NÃ¤slund, gn222gq",
            "email": "gn222gq@student.lnu.se"
        },
        "version": "1.0"
    },
    "host": "https://cscloud7-113.lnu.se/dogadoption",
    "basePath": "/api/v1",
    "paths": {
        "/": {
            "get": {
                "description": "Returns a collection of links that represent the entry point of the API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entrypoint"
                ],
                "summary": "Get entry point links",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EntryPointLinksDTO"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user by username and password, and returns a JWT token if successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authhandler.Payload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns JWT token",
                        "schema": {
                            "$ref": "#/definitions/authhandler.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request when the JSON body cannot be parsed or wrong payload type",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, when the username or password is incorrect",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, something went wrong with the server",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dogs": {
            "get": {
                "description": "Retrieves a list of dogs based on provided query parameters like breed, size, and age.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogs"
                ],
                "summary": "Get dogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by dog breed",
                        "name": "breed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by dog gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by if dog is neutered",
                        "name": "is_neutered",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by if dog is adopted",
                        "name": "is_adopted",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter dogs that are from a specific dog shelter",
                        "name": "shelter_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns a list of dogs along with pagination details",
                        "schema": {
                            "$ref": "#/definitions/dogdto.DogsAndPaginationLinksDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request if the query parameters are invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new dog to the system with the provided dog data in JSON format. shelter_id field is for admins only.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogs"
                ],
                "summary": "Add a new dog",
                "parameters": [
                    {
                        "description": "Dog Data",
                        "name": "dog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dogdto.NewDogDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success, returns the newly created dog information",
                        "schema": {
                            "$ref": "#/definitions/dogdto.DogDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the JSON body cannot be parsed or mandatory fields are missing",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user does not have permission to add a dog",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dogs/{id}": {
            "get": {
                "description": "Retrieves detailed information about a dog specified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogs"
                ],
                "summary": "Get a dog by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns detailed information about the dog",
                        "schema": {
                            "$ref": "#/definitions/dogdto.DogDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found, if no dog matches the provided ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the information for an existing dog specified by its ID with the provided dog data in JSON format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogs"
                ],
                "summary": "Update dog information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dog Update Data",
                        "name": "dog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dogdto.UpdateDogDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns the updated dog information",
                        "schema": {
                            "$ref": "#/definitions/dogdto.DogDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the JSON body cannot be parsed, mandatory fields are missing, or the dog data is incomplete",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user does not have permission to update the dog",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a dog specified by its ID if the requester has the necessary permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogs"
                ],
                "summary": "Delete a dog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Dog deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request if the request was malformed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user does not have permission to delete the dog",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found if the dog with the specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error for any server errors",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dogshelters": {
            "get": {
                "description": "Retrieves a list of dog shelters based on provided query parameters like location and capacity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogshelters"
                ],
                "summary": "Get dog shelters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by city",
                        "name": "city",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns a list of dog shelters",
                        "schema": {
                            "$ref": "#/definitions/dogshelterdto.DogSheltersAndPaginationLinksDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request if the query parameters are invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new dog shelter to the system with the provided shelter data in JSON format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogshelters"
                ],
                "summary": "Add a new dog shelter",
                "parameters": [
                    {
                        "description": "Dog Shelter Data",
                        "name": "shelter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dogshelterdto.NewDogShelterDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success, returns the newly created dog shelter information",
                        "schema": {
                            "$ref": "#/definitions/dogshelterdto.DogShelterDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the JSON body cannot be parsed, mandatory fields are missing, or the dog shelter data is incomplete",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user does not have permission to add a dog shelter",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dogshelters/{id}": {
            "get": {
                "description": "Retrieves detailed information about a specific dog shelter identified by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogshelters"
                ],
                "summary": "Get a dog shelter by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shelter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns detailed information about the dog shelter",
                        "schema": {
                            "$ref": "#/definitions/dogshelterdto.DogShelterDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found, if no dog shelter matches the provided ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the information for an existing dog shelter specified by its ID with the provided shelter data in JSON format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogshelters"
                ],
                "summary": "Update a dog shelter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shelter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dog Shelter Update Data",
                        "name": "shelter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dogshelterdto.UpdateDogShelterDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns the updated dog shelter information",
                        "schema": {
                            "$ref": "#/definitions/dogshelterdto.DogShelterDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the JSON body cannot be parsed, mandatory fields are missing, or the dog shelter data is incomplete",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user does not have permission to update the dog shelter",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a dog shelter specified by its ID if the requester has the necessary permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dogshelters"
                ],
                "summary": "Delete a dog shelter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shelter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Dog shelter deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request if the request was malformed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user does not have permission to delete the dog shelter",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found if the dog shelter with the specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error for any server errors",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Adds a new user to the system with the provided user data in JSON format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "New User Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userdto.NewUserDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success, returns the newly created user information",
                        "schema": {
                            "$ref": "#/definitions/userdto.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the request body is incomplete or contains invalid data",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if something goes wrong internally",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about the authenticated user based on the provided credentials.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get authenticated user information",
                "responses": {
                    "200": {
                        "description": "Success, returns detailed information about the authenticated user",
                        "schema": {
                            "$ref": "#/definitions/userdto.UserDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user credentials do not match or are invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user identified by its unique ID, provided the requester has the necessary permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request, if the ID parameter format is incorrect",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the requester does not have permission to delete the user",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found, if no user matches the provided ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/webhook": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific user webhook identified by its unique ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users/{id}/webhook"
                ],
                "summary": "Get a user webhook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns detailed information about the user webhook",
                        "schema": {
                            "$ref": "#/definitions/userwebhookdto.UserWebhookDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user credentials are invalid or do not grant access to the requested resource",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found, if no resource matches the provided ID or the webhook does not belong to the user",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates information for a specific user webhook identified by its unique ID for the authenticated user based on the provided data in JSON format. Secret must be minimum 12 characters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users/{id}/webhook"
                ],
                "summary": "Update a user webhook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Webhook Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userwebhookdto.UpdateUserWebhookDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, returns the updated user webhook information",
                        "schema": {
                            "$ref": "#/definitions/userwebhookdto.UserWebhookDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the request data is incomplete or has invalid values",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user credentials do not match or are invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found, if no matching webhook resource is found for the given ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new webhook for the authenticated user based on the provided webhook data in JSON format. Secret must be minimum 12 characters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users/{id}/webhook"
                ],
                "summary": "Create a new user webhook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Webhook Data",
                        "name": "webhook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userwebhookdto.NewUserWebhookDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success, returns the newly created user webhook information",
                        "schema": {
                            "$ref": "#/definitions/userwebhookdto.UserWebhookDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request, if the JSON body cannot be parsed, mandatory fields are missing, or the webhook data is incomplete",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, if the user credentials do not match or are invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found, if the specified user does not exist",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, if an error occurs while processing the request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a webhook for the authenticated user based on the provided webhook ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users/{id}/webhook"
                ],
                "summary": "Delete a webhook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Webhook ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Webhook deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request - No webhook found or ID must be a number",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid user credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - No webhook found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Something went wrong internally, try again later",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authhandler.Payload": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authhandler.Response": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dogdto.DogDTO": {
            "type": "object",
            "properties": {
                "adoption_fee": {
                    "type": "integer"
                },
                "birth_date": {
                    "type": "string"
                },
                "breed": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "friendly_with": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "is_adopted": {
                    "type": "boolean"
                },
                "is_neutered": {
                    "type": "boolean"
                },
                "links": {
                    "$ref": "#/definitions/dogdto.DogLinksDTO"
                },
                "name": {
                    "type": "string"
                },
                "shelter_id": {
                    "type": "integer"
                }
            }
        },
        "dogdto.DogLinksDTO": {
            "type": "object",
            "properties": {
                "self_link": {
                    "type": "string"
                },
                "shelter_link": {
                    "type": "string"
                }
            }
        },
        "dogdto.DogsAndPaginationLinksDTO": {
            "type": "object",
            "properties": {
                "dogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dogdto.DogDTO"
                    }
                },
                "pagination_links": {
                    "$ref": "#/definitions/dto.PaginationLinksDTO"
                }
            }
        },
        "dogdto.NewDogDTO": {
            "type": "object",
            "properties": {
                "adoption_fee": {
                    "type": "integer"
                },
                "birth_date": {
                    "type": "string"
                },
                "breed": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "friendly_with": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "is_adopted": {
                    "type": "boolean"
                },
                "is_neutered": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "shelter_id": {
                    "type": "integer"
                }
            }
        },
        "dogdto.UpdateDogDTO": {
            "type": "object",
            "properties": {
                "adoption_fee": {
                    "type": "integer"
                },
                "birth_date": {
                    "type": "string"
                },
                "breed": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "friendly_with": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "is_adopted": {
                    "type": "boolean"
                },
                "is_neutered": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dogshelterdto.DogShelterDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "links": {
                    "$ref": "#/definitions/dogshelterdto.DogShelterDtoLinks"
                },
                "name": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "dogshelterdto.DogShelterDtoLinks": {
            "type": "object",
            "properties": {
                "dogs_link": {
                    "type": "string"
                },
                "self_link": {
                    "type": "string"
                }
            }
        },
        "dogshelterdto.DogSheltersAndPaginationLinksDTO": {
            "type": "object",
            "properties": {
                "dog_shelter_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dogshelterdto.DogShelterDTO"
                    }
                },
                "pagination_links": {
                    "$ref": "#/definitions/dto.PaginationLinksDTO"
                }
            }
        },
        "dogshelterdto.NewDogShelterDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "dogshelterdto.UpdateDogShelterDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "dto.EntryPointLinksDTO": {
            "type": "object",
            "properties": {
                "authentication_url": {
                    "type": "string"
                },
                "dog_shelters_url": {
                    "type": "string"
                },
                "dogs_url": {
                    "type": "string"
                },
                "users_url": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dto.PaginationLinksDTO": {
            "type": "object",
            "properties": {
                "first": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                },
                "previous": {
                    "type": "string"
                },
                "self": {
                    "type": "string"
                }
            }
        },
        "model.WebhookAction": {
            "type": "string",
            "enum": [
                "new_dog_added"
            ],
            "x-enum-varnames": [
                "NEW_DOG_ADDED"
            ]
        },
        "userdto.NewUserDTO": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "userdto.UserDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "webhook": {
                    "$ref": "#/definitions/userwebhookdto.UserWebhookDTO"
                }
            }
        },
        "userwebhookdto.NewUserWebhookDTO": {
            "type": "object",
            "properties": {
                "client_secret": {
                    "type": "string"
                },
                "endpoint_url": {
                    "type": "string"
                },
                "webhook_actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "userwebhookdto.UpdateUserWebhookDTO": {
            "type": "object",
            "properties": {
                "client_secret": {
                    "type": "string"
                },
                "endpoint_url": {
                    "type": "string"
                },
                "webhook_actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "userwebhookdto.UserWebhookDTO": {
            "type": "object",
            "properties": {
                "endpoint_url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "webhook_actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.WebhookAction"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}